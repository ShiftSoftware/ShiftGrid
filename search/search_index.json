{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"getting-started/","text":"This guide will get you started quickly. Then dive into the docs to learn more. Installation \u00b6 The Core package ShiftSoftware.ShiftGrid.Core is available on nuget.org . Package Manager Console Nuget Package Manager (UI) Install-Package ShiftSoftware.ShiftGrid.Core Right Click on the Solution Name In Visual Studio Click Manage NuGet Packages Click Browse Find ShiftSoftware.ShiftGrid.Core and Install it. Usage (Import) \u00b6 Shift Grid provides extension methods to IQueryable . You need to import it via the using statement to access the extension methods. using ShiftSoftware.ShiftGrid.Core ; Basic Example \u00b6 This example shows the Shift Grid being used in a Web API. C# / Endpoint Request Body (POST) Response (Omitted) Response (Full) [HttpPost(\"basic\")] public async Task < ActionResult > Basic ([ FromBody ] GridConfig gridConfig ) { var db = new DB (); var shiftGrid = await db . Employees . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , gridConfig ); return Ok ( shiftGrid ); } This Endpoint accepts a GridConfig from the client. The GridConfig can control the Pagination, Sorting, Filtering of data. { \"dataPageIndex\" : 0 , \"dataPageSize\" : 5 , \"sort\" : [ { \"field\" : \"ID\" , \"sortDirection\" : 0 } ], \"columns\" : [], \"pagination\" : { \"pageSize\" : 10 } } The dataPageIndex is set to 0 to load the first page. and the dataPageSize is set to 5 to load 5 items in each page. { \"dataPageIndex\" : 0 , \"dataPageSize\" : 5 , \"dataCount\" : 1000 , \"data\" : [ ... ], \"aggregate\" : null , \"sort\" : [ ... ], \"stableSort\" : { ... }, \"filters\" : [], \"columns\" : [ ... ], \"pagination\" : { ... }, \"beforeLoadingData\" : \"2022-07-13T07:31:05.8462685Z\" , \"afterLoadingData\" : \"2022-07-13T07:31:05.8474664Z\" } Objects and Arrays are omitted here so you can see the entire JSON in one preview. See the next tab for the full response. { \"dataPageIndex\" : 0 , \"dataPageSize\" : 5 , \"dataCount\" : 1000 , \"data\" : [ { \"id\" : 1 , \"firstName\" : \"First Name (1)\" , \"lastName\" : \"Last Name (1)\" , \"birthdate\" : null , \"departmentId\" : 1 , \"department\" : null }, { \"id\" : 2 , \"firstName\" : \"First Name (2)\" , \"lastName\" : \"Last Name (2)\" , \"birthdate\" : null , \"departmentId\" : 2 , \"department\" : null }, { \"id\" : 3 , \"firstName\" : \"First Name (3)\" , \"lastName\" : \"Last Name (3)\" , \"birthdate\" : null , \"departmentId\" : 3 , \"department\" : null }, { \"id\" : 4 , \"firstName\" : \"First Name (4)\" , \"lastName\" : \"Last Name (4)\" , \"birthdate\" : null , \"departmentId\" : 4 , \"department\" : null }, { \"id\" : 5 , \"firstName\" : \"First Name (5)\" , \"lastName\" : \"Last Name (5)\" , \"birthdate\" : null , \"departmentId\" : 5 , \"department\" : null } ], \"aggregate\" : null , \"sort\" : [ { \"field\" : \"ID\" , \"sortDirection\" : 0 } ], \"stableSort\" : { \"field\" : \"ID\" , \"sortDirection\" : 0 }, \"filters\" : [], \"columns\" : [ { \"headerText\" : \"ID\" , \"field\" : \"ID\" , \"visible\" : true , \"order\" : 0 }, { \"headerText\" : \"FirstName\" , \"field\" : \"FirstName\" , \"visible\" : true , \"order\" : 1 }, { \"headerText\" : \"LastName\" , \"field\" : \"LastName\" , \"visible\" : true , \"order\" : 2 }, { \"headerText\" : \"Birthdate\" , \"field\" : \"Birthdate\" , \"visible\" : true , \"order\" : 3 }, { \"headerText\" : \"DepartmentId\" , \"field\" : \"DepartmentId\" , \"visible\" : true , \"order\" : 4 }, { \"headerText\" : \"Department\" , \"field\" : \"Department\" , \"visible\" : true , \"order\" : 5 } ], \"pagination\" : { \"count\" : 200 , \"pageSize\" : 10 , \"pageStart\" : 0 , \"pageEnd\" : 9 , \"pageIndex\" : 0 , \"hasPreviousPage\" : false , \"hasNextPage\" : true , \"lastPageIndex\" : 199 , \"dataStart\" : 1 , \"dataEnd\" : 5 }, \"beforeLoadingData\" : \"2022-07-13T07:31:05.8462685Z\" , \"afterLoadingData\" : \"2022-07-13T07:31:05.8474664Z\" }","title":"Getting Started"},{"location":"getting-started/#installation","text":"The Core package ShiftSoftware.ShiftGrid.Core is available on nuget.org . Package Manager Console Nuget Package Manager (UI) Install-Package ShiftSoftware.ShiftGrid.Core Right Click on the Solution Name In Visual Studio Click Manage NuGet Packages Click Browse Find ShiftSoftware.ShiftGrid.Core and Install it.","title":"Installation"},{"location":"getting-started/#usage-import","text":"Shift Grid provides extension methods to IQueryable . You need to import it via the using statement to access the extension methods. using ShiftSoftware.ShiftGrid.Core ;","title":"Usage (Import)"},{"location":"getting-started/#basic-example","text":"This example shows the Shift Grid being used in a Web API. C# / Endpoint Request Body (POST) Response (Omitted) Response (Full) [HttpPost(\"basic\")] public async Task < ActionResult > Basic ([ FromBody ] GridConfig gridConfig ) { var db = new DB (); var shiftGrid = await db . Employees . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , gridConfig ); return Ok ( shiftGrid ); } This Endpoint accepts a GridConfig from the client. The GridConfig can control the Pagination, Sorting, Filtering of data. { \"dataPageIndex\" : 0 , \"dataPageSize\" : 5 , \"sort\" : [ { \"field\" : \"ID\" , \"sortDirection\" : 0 } ], \"columns\" : [], \"pagination\" : { \"pageSize\" : 10 } } The dataPageIndex is set to 0 to load the first page. and the dataPageSize is set to 5 to load 5 items in each page. { \"dataPageIndex\" : 0 , \"dataPageSize\" : 5 , \"dataCount\" : 1000 , \"data\" : [ ... ], \"aggregate\" : null , \"sort\" : [ ... ], \"stableSort\" : { ... }, \"filters\" : [], \"columns\" : [ ... ], \"pagination\" : { ... }, \"beforeLoadingData\" : \"2022-07-13T07:31:05.8462685Z\" , \"afterLoadingData\" : \"2022-07-13T07:31:05.8474664Z\" } Objects and Arrays are omitted here so you can see the entire JSON in one preview. See the next tab for the full response. { \"dataPageIndex\" : 0 , \"dataPageSize\" : 5 , \"dataCount\" : 1000 , \"data\" : [ { \"id\" : 1 , \"firstName\" : \"First Name (1)\" , \"lastName\" : \"Last Name (1)\" , \"birthdate\" : null , \"departmentId\" : 1 , \"department\" : null }, { \"id\" : 2 , \"firstName\" : \"First Name (2)\" , \"lastName\" : \"Last Name (2)\" , \"birthdate\" : null , \"departmentId\" : 2 , \"department\" : null }, { \"id\" : 3 , \"firstName\" : \"First Name (3)\" , \"lastName\" : \"Last Name (3)\" , \"birthdate\" : null , \"departmentId\" : 3 , \"department\" : null }, { \"id\" : 4 , \"firstName\" : \"First Name (4)\" , \"lastName\" : \"Last Name (4)\" , \"birthdate\" : null , \"departmentId\" : 4 , \"department\" : null }, { \"id\" : 5 , \"firstName\" : \"First Name (5)\" , \"lastName\" : \"Last Name (5)\" , \"birthdate\" : null , \"departmentId\" : 5 , \"department\" : null } ], \"aggregate\" : null , \"sort\" : [ { \"field\" : \"ID\" , \"sortDirection\" : 0 } ], \"stableSort\" : { \"field\" : \"ID\" , \"sortDirection\" : 0 }, \"filters\" : [], \"columns\" : [ { \"headerText\" : \"ID\" , \"field\" : \"ID\" , \"visible\" : true , \"order\" : 0 }, { \"headerText\" : \"FirstName\" , \"field\" : \"FirstName\" , \"visible\" : true , \"order\" : 1 }, { \"headerText\" : \"LastName\" , \"field\" : \"LastName\" , \"visible\" : true , \"order\" : 2 }, { \"headerText\" : \"Birthdate\" , \"field\" : \"Birthdate\" , \"visible\" : true , \"order\" : 3 }, { \"headerText\" : \"DepartmentId\" , \"field\" : \"DepartmentId\" , \"visible\" : true , \"order\" : 4 }, { \"headerText\" : \"Department\" , \"field\" : \"Department\" , \"visible\" : true , \"order\" : 5 } ], \"pagination\" : { \"count\" : 200 , \"pageSize\" : 10 , \"pageStart\" : 0 , \"pageEnd\" : 9 , \"pageIndex\" : 0 , \"hasPreviousPage\" : false , \"hasNextPage\" : true , \"lastPageIndex\" : 199 , \"dataStart\" : 1 , \"dataEnd\" : 5 }, \"beforeLoadingData\" : \"2022-07-13T07:31:05.8462685Z\" , \"afterLoadingData\" : \"2022-07-13T07:31:05.8474664Z\" }","title":"Basic Example"},{"location":"methods/","text":"ToShiftGridAsync | ToShiftGrid \u00b6 The Grid can be initialized by calling the ToShiftGridAsync or ToShiftGrid extension methods on an IQueryable var shiftGridAsync = await db . Employees . ToShiftGridAsync ( \"ID\" ); or var shiftGrid = db . Employees . ToShiftGrid ( \"ID\" ); Parameters: Parameter Description stableSortField String The unique field in the dataset for sorting the result. More about Stable Sorting stableSortDirection SortDirection The sort direction for the Stable Sorting. Defaults to Ascending gridConfig GridConfig This is how the grid is controlled. Page Size, Page Index, Filters, Sorting ...etc SelectAggregate \u00b6 Used for Aggregating data. The Aggregation works on the entire data set (Not the paginated Data.). And all the aggregation is performed from the Database side. [HttpPost(\"aggregate\")] public async Task < ActionResult > Aggregate ([ FromBody ] GridConfig gridConfig ) { var db = new DB (); var DbF = Microsoft . EntityFrameworkCore . EF . Functions ; var shiftGrid = await db . Employees . Select ( x => new { x . ID , x . FirstName , x . Birthdate }) . SelectAggregate ( x => new { Count = x . Count (), OldestEmployeeBirthdate = x . Min ( y => y . Birthdate ), YoungestEmployeeBirthdate = x . Max ( y => y . Birthdate ), NumberOfEmployeesBetween30And40 = x . Count ( y => DbF . DateDiffYear ( y . Birthdate , DateTime . Now ) >= 30 && DbF . DateDiffYear ( y . Birthdate , DateTime . Now ) <= 40 ) }) . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , gridConfig ); return Ok ( shiftGrid ); } Tip When aggregating. It's very important to Include the total count of the data. Something like Count = x.Count() . If you do this. We'll use your Count as the DataCount for the Grid . This means there'll be 2 Database calls. One for getting the paginated data. And one for getting the aggrecated data. If you don't Include the Count . We'll add another database call for getting the Count . And you'll have 3 Database calls instead of 2. Danger If you do include the Count . Make sure you do a full count and not a conditional count. If you something like below for example, the Grid will use your count as the DataCount leaving you with unexpected behaviour. . SelectAggregate ( x => new { //This is very dangerous Count = x . Count ( y => y . ID > 10 ), } Do below instead . SelectAggregate ( x => new { //This is safe and recommended Count = x . Count (), } ToCSVStream \u00b6 When the Export flag on ExportConfig is set to true. This method ToCSVStream() can be used to export the entire data (Unpaginated) to a stream. Here's an example: [HttpGet(\"export\")] public async Task < ActionResult > Export () { var db = new DB (); var DbF = Microsoft . EntityFrameworkCore . EF . Functions ; var shiftGrid = await db . Employees . Select ( x => new EmployeeCSV { ID = x . ID , FullName = x . FirstName + \" \" + x . LastName , Age = DbF . DateDiffYear ( x . Birthdate , DateTime . Now ) }) . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , new GridConfig { ExportConfig = new ExportConfig { Export = true , } }); var stream = shiftGrid . ToCSVStream (); return File ( stream . ToArray (), \"text/csv\" ); } ToCSVString \u00b6 Identical to ToCSVStream . But this will export the data to a String instead of a Stream . Here's an example for that. Note the Delimiter is changed to | in this example. [HttpGet(\"export-string\")] public async Task < ActionResult > ExportString () { var db = new DB (); var DbF = Microsoft . EntityFrameworkCore . EF . Functions ; var shiftGrid = await db . Employees . Select ( x => new EmployeeCSV { ID = x . ID , FullName = x . FirstName + \" \" + x . LastName , Age = DbF . DateDiffYear ( x . Birthdate , DateTime . Now ) }) . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , new GridConfig { ExportConfig = new ExportConfig { Export = true , Delimiter = \"|\" } }); var csvString = shiftGrid . ToCSVString (); return Ok ( csvString ); } Note We're using the FileHelpers for exporting data to CSV. In the above example we're using a class named EmployeeCSV . Note how the class and the fields are decorated by custom attributes from `FileHelpers . [FileHelpers.DelimitedRecord(\",\")] public class EmployeeCSV { [FileHelpers.FieldCaption(\"Employee ID\")] public long ID { get ; set ; } [FileHelpers.FieldCaption(\"Full Name\")] public string FullName { get ; set ; } [FileHelpers.FieldCaption(\"Age\")] public int? Age { get ; set ; } }","title":"Methods"},{"location":"methods/#toshiftgridasync-toshiftgrid","text":"The Grid can be initialized by calling the ToShiftGridAsync or ToShiftGrid extension methods on an IQueryable var shiftGridAsync = await db . Employees . ToShiftGridAsync ( \"ID\" ); or var shiftGrid = db . Employees . ToShiftGrid ( \"ID\" ); Parameters: Parameter Description stableSortField String The unique field in the dataset for sorting the result. More about Stable Sorting stableSortDirection SortDirection The sort direction for the Stable Sorting. Defaults to Ascending gridConfig GridConfig This is how the grid is controlled. Page Size, Page Index, Filters, Sorting ...etc","title":"ToShiftGridAsync | ToShiftGrid"},{"location":"methods/#selectaggregate","text":"Used for Aggregating data. The Aggregation works on the entire data set (Not the paginated Data.). And all the aggregation is performed from the Database side. [HttpPost(\"aggregate\")] public async Task < ActionResult > Aggregate ([ FromBody ] GridConfig gridConfig ) { var db = new DB (); var DbF = Microsoft . EntityFrameworkCore . EF . Functions ; var shiftGrid = await db . Employees . Select ( x => new { x . ID , x . FirstName , x . Birthdate }) . SelectAggregate ( x => new { Count = x . Count (), OldestEmployeeBirthdate = x . Min ( y => y . Birthdate ), YoungestEmployeeBirthdate = x . Max ( y => y . Birthdate ), NumberOfEmployeesBetween30And40 = x . Count ( y => DbF . DateDiffYear ( y . Birthdate , DateTime . Now ) >= 30 && DbF . DateDiffYear ( y . Birthdate , DateTime . Now ) <= 40 ) }) . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , gridConfig ); return Ok ( shiftGrid ); } Tip When aggregating. It's very important to Include the total count of the data. Something like Count = x.Count() . If you do this. We'll use your Count as the DataCount for the Grid . This means there'll be 2 Database calls. One for getting the paginated data. And one for getting the aggrecated data. If you don't Include the Count . We'll add another database call for getting the Count . And you'll have 3 Database calls instead of 2. Danger If you do include the Count . Make sure you do a full count and not a conditional count. If you something like below for example, the Grid will use your count as the DataCount leaving you with unexpected behaviour. . SelectAggregate ( x => new { //This is very dangerous Count = x . Count ( y => y . ID > 10 ), } Do below instead . SelectAggregate ( x => new { //This is safe and recommended Count = x . Count (), }","title":"SelectAggregate"},{"location":"methods/#tocsvstream","text":"When the Export flag on ExportConfig is set to true. This method ToCSVStream() can be used to export the entire data (Unpaginated) to a stream. Here's an example: [HttpGet(\"export\")] public async Task < ActionResult > Export () { var db = new DB (); var DbF = Microsoft . EntityFrameworkCore . EF . Functions ; var shiftGrid = await db . Employees . Select ( x => new EmployeeCSV { ID = x . ID , FullName = x . FirstName + \" \" + x . LastName , Age = DbF . DateDiffYear ( x . Birthdate , DateTime . Now ) }) . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , new GridConfig { ExportConfig = new ExportConfig { Export = true , } }); var stream = shiftGrid . ToCSVStream (); return File ( stream . ToArray (), \"text/csv\" ); }","title":"ToCSVStream"},{"location":"methods/#tocsvstring","text":"Identical to ToCSVStream . But this will export the data to a String instead of a Stream . Here's an example for that. Note the Delimiter is changed to | in this example. [HttpGet(\"export-string\")] public async Task < ActionResult > ExportString () { var db = new DB (); var DbF = Microsoft . EntityFrameworkCore . EF . Functions ; var shiftGrid = await db . Employees . Select ( x => new EmployeeCSV { ID = x . ID , FullName = x . FirstName + \" \" + x . LastName , Age = DbF . DateDiffYear ( x . Birthdate , DateTime . Now ) }) . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , new GridConfig { ExportConfig = new ExportConfig { Export = true , Delimiter = \"|\" } }); var csvString = shiftGrid . ToCSVString (); return Ok ( csvString ); } Note We're using the FileHelpers for exporting data to CSV. In the above example we're using a class named EmployeeCSV . Note how the class and the fields are decorated by custom attributes from `FileHelpers . [FileHelpers.DelimitedRecord(\",\")] public class EmployeeCSV { [FileHelpers.FieldCaption(\"Employee ID\")] public long ID { get ; set ; } [FileHelpers.FieldCaption(\"Full Name\")] public string FullName { get ; set ; } [FileHelpers.FieldCaption(\"Age\")] public int? Age { get ; set ; } }","title":"ToCSVString"},{"location":"philosophy/","text":"Stable Sort \u00b6 Some database Engines do not guarantee a stable ordering of rows by default (For example: MS SQL Server). When paginating, the row orders might change. This is very bad of course because some rows might be repeated and some might not show up at all. To solve this, The database ORDER BY must contains a column or combination of columns that are guaranteed to be unique. Sort is not specified. \u00b6 Even if you don't specify the Sort in the GridConfig . We enforce a stable sort in our ToShiftGridAsync and ToShiftGrid methods. [HttpPost(\"stable-sort\")] public async Task < ActionResult > StableSort () { var db = new DB (); var shiftGrid = await db . Employees . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending ); } The above example (when using EF Core and SQL Server) generates an SQL like below SELECT TOP ( 20 ) [ e ].[ ID ], [ e ].[ Birthdate ], [ e ].[ DepartmentId ], [ e ].[ FirstName ], [ e ].[ LastName ] FROM [ Employees ] AS [ e ] ORDER BY [ e ].[ ID ] Sorting is Specified \u00b6 If you do specify the Sort in the GridConfig . Your Sort(s) are used first. And then the Stable Sort is used. (See the generated SQL for the below example). [HttpPost(\"stable-sort-with-another-sort\")] public async Task < ActionResult > StableSortWithAnotherSort () { var db = new DB (); var shiftGrid = await db . Employees . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , new GridConfig { Sort = new List < GridSort > { new GridSort { Field = nameof ( Employee . Birthdate ), SortDirection = SortDirection . Descending } } }); } The above example (when using EF Core and SQL Server) generates an SQL like below SELECT TOP ( 20 ) [ e ].[ ID ], [ e ].[ Birthdate ], [ e ].[ DepartmentId ], [ e ].[ FirstName ], [ e ].[ LastName ] FROM [ Employees ] AS [ e ] ORDER BY [ e ].[ Birthdate ] DESC , [ e ].[ ID ] Warning It's very important that you use a column or combination of columns that are guaranteed to be unique . Otherwise the ordering and the pagination can not be guaranteed","title":"Philosophy"},{"location":"philosophy/#stable-sort","text":"Some database Engines do not guarantee a stable ordering of rows by default (For example: MS SQL Server). When paginating, the row orders might change. This is very bad of course because some rows might be repeated and some might not show up at all. To solve this, The database ORDER BY must contains a column or combination of columns that are guaranteed to be unique.","title":"Stable Sort"},{"location":"philosophy/#sort-is-not-specified","text":"Even if you don't specify the Sort in the GridConfig . We enforce a stable sort in our ToShiftGridAsync and ToShiftGrid methods. [HttpPost(\"stable-sort\")] public async Task < ActionResult > StableSort () { var db = new DB (); var shiftGrid = await db . Employees . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending ); } The above example (when using EF Core and SQL Server) generates an SQL like below SELECT TOP ( 20 ) [ e ].[ ID ], [ e ].[ Birthdate ], [ e ].[ DepartmentId ], [ e ].[ FirstName ], [ e ].[ LastName ] FROM [ Employees ] AS [ e ] ORDER BY [ e ].[ ID ]","title":"Sort is not specified."},{"location":"philosophy/#sorting-is-specified","text":"If you do specify the Sort in the GridConfig . Your Sort(s) are used first. And then the Stable Sort is used. (See the generated SQL for the below example). [HttpPost(\"stable-sort-with-another-sort\")] public async Task < ActionResult > StableSortWithAnotherSort () { var db = new DB (); var shiftGrid = await db . Employees . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , new GridConfig { Sort = new List < GridSort > { new GridSort { Field = nameof ( Employee . Birthdate ), SortDirection = SortDirection . Descending } } }); } The above example (when using EF Core and SQL Server) generates an SQL like below SELECT TOP ( 20 ) [ e ].[ ID ], [ e ].[ Birthdate ], [ e ].[ DepartmentId ], [ e ].[ FirstName ], [ e ].[ LastName ] FROM [ Employees ] AS [ e ] ORDER BY [ e ].[ Birthdate ] DESC , [ e ].[ ID ] Warning It's very important that you use a column or combination of columns that are guaranteed to be unique . Otherwise the ordering and the pagination can not be guaranteed","title":"Sorting is Specified"},{"location":"reference/","text":"The Shift Grid fetches data and prepares it in a format that can be easily integrated into a Data Table. Grid \u00b6 The Grid ( ShiftSoftware.ShiftGrid.Core.Grid ) can be initialized by calling the ToShiftGridAsync or ToShiftGrid extension methods on an IQueryable . The Grid contains below properties. Property Description DataPageIndex int The current page index of the paginated data. DataPageSize int The Number of Items (Or number of rows) per Page. DataCount int The total count of the data (The Unpaginated Count). Data List<T> This is the actual data that's fetched from Database. Aggregate T2 Aggregated Data. This is available if SelectAggregate extension method is used. Sort List<GridSort> The list of Fields that the Data is sorted by. StableSort GridSort The mandatory Stable Sort that the data is sorted by. Learn more about Stable Sorting Filters List<GridFilter> The list of filters that the data is filtered by. Columns List<GridColumn> The column defnition of the Dataset that contains below: HeaderText , Field , Visible , and Order . Pagination GridPagination Information about the pagination area. BeforeLoadingData DateTime (UTC) The timestamp just before making the database call(s) AfterLoadingData DateTime (UTC) The timestamp just after the data is finished loading from database GridConfig \u00b6 The ToShiftGridAsync and ToShiftGrid extension methods accept a GridConfig . This is used to control the Grid. Like setting the page size, index, sorting, filters ...etc. Below are the properties. Property Description DataPageIndex int Sets the page index of the paginated data. DataPageSize int Sets the Page Size (Or number of items/rows per page) that's fetched from the Database. Defaults to 20 Sort List<GridSort> A list of Fields to sort the Data by. The order of the items in the list is important. It'll be passed to the database in the same order. Filters List<GridFilter> A list of filters to filter the Data by. Columns List<GridColumn> Mainly used to hide fields (Set Visible to false). Hidden fields are also excluded it in the SQL Query. And if there are table joins, the joining will be omitted. Pagination PaginationConfig Adjusts the pagination area. ExportConfig ExportConfig Can be used to set the Export flag and the CSV Delimiter. GridSort \u00b6 Property Description Field string The field (Column) for sorting the Data. SortDirection SortDirection An enum indicating the direction of the Sort. SortDirection.Ascending or SortDirection.Descending GridFilter \u00b6 We use System.Linq.Dynamic.Core under the hood for applying filters. Property Description Field string The field that the filter is applied on. Operator string The filter operator. Can be one of the below: = , != , > , >= , < , <= , Contains , In , NotIn , StartsWith , EndsWith Value object The value for filtering (or the search term). OR List<GridFilter> A list of GridFilter that will be OR ed with the crreunt filter. GridColumn \u00b6 Property Description HeaderText string The optional Header Text (or Display Text) for the Column. Useful to pass it down to the client from the Server. Field string The Field Name as specified on the LINQ Select statement. Visible bool When set to false , the field will be excluded in the generated SQL. If the field comes from a table join. The join is also omitted. Hidng columns only work when .Select is used on the data. If .Select is not used, a ColumnHidingException will be thrown. Order int The order of the Column on the Data Grid. GridPagination \u00b6 This is purely there to help the client while setting up the pagination area. You might ignore this and rely on DataPageIndex , DataPageSize , DataCount from the Grid . Sometimes, the number of rows might be too large that the pagination area itself should be paginated. See the below as an example: .md-button{ font-size:12px; padding:10px 5px !important; min-width:45px; } Example In this example, there are 1,000 rows, 20 rows are shown per page, and the current active page index is 12 . First Page (1) < Previous 11 12 13 14 15 Next > Last Page (50) Showing [241 to 260] from [1,000] Below are the properties of the GridPagination according to the example. Property Description Count int Number of Pages. In the above example, there are 1,000 rows and the page size is 20 . So the Count is 50 . PageSize int How many items (Buttons or Links) are shown per page (In the pagination area). In the above example, the PageSize is 5 . Not to be confused with DataPageSize PageStart int The index of the first page in the current view.. In the above example, PageStart is 10 PageEnd int The index of the last page in the current view. In the above example, PageEnd is 14 PageIndex int The active item (PageIndex). In the above example, PageIndex is 12 HasPreviousPage bool True when there are more items BEFORE the current page. In the above example, HasPreviousPage is true HasNextPage bool True when there are more items AFTER the current page. In the above example, HasNextPage is true LastPageIndex int The last PageIndex. In the above example, LastPageIndex is 49 DataStart int The row number (not index) of the first data item. In the above example, DataStart is 241 DataEnd int The row number (not index) of the last data item. In the above example, DataEnd is 260 PaginationConfig \u00b6 Property Description PageSize int How many items (Buttons or Links) are shown per page (In the pagination area). Not to be confused with DataPageSize ExportConfig \u00b6 Property Description Export bool The Export Flag. When set to true , the data is prepared for export. We're using the FileHelpers for exporting data to CSV Delimiter string The Delimiter that's used for seperating data in the exported CSV file/stream. ColumnHidingException \u00b6 When configuring the Grid using GridConfig , You can exclude (Hide) certain columns. But this is only possible if Select method is used on the data. Otherwise a ColumnHidingException is thrown Safe Select is used on this example. Hiding works as expected. var shiftGrid = await db . Employees . Select ( x => new { x . ID , x . FirstName , x . LastName , }) . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , new GridConfig { Columns = new List < GridColumn > { new GridColumn { Field = \"FirstName\" , Visible = false } } }); Unsafe Select is not used here and attempting to hide Firstname causes a ColumnHidingException to be thrown. var shiftGrid = await db . Employees . Select ( x => new { x . ID , x . FirstName , x . LastName , }) . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , new GridConfig { Columns = new List < GridColumn > { new GridColumn { Field = \"FirstName\" , Visible = false } } });","title":"Reference"},{"location":"reference/#grid","text":"The Grid ( ShiftSoftware.ShiftGrid.Core.Grid ) can be initialized by calling the ToShiftGridAsync or ToShiftGrid extension methods on an IQueryable . The Grid contains below properties. Property Description DataPageIndex int The current page index of the paginated data. DataPageSize int The Number of Items (Or number of rows) per Page. DataCount int The total count of the data (The Unpaginated Count). Data List<T> This is the actual data that's fetched from Database. Aggregate T2 Aggregated Data. This is available if SelectAggregate extension method is used. Sort List<GridSort> The list of Fields that the Data is sorted by. StableSort GridSort The mandatory Stable Sort that the data is sorted by. Learn more about Stable Sorting Filters List<GridFilter> The list of filters that the data is filtered by. Columns List<GridColumn> The column defnition of the Dataset that contains below: HeaderText , Field , Visible , and Order . Pagination GridPagination Information about the pagination area. BeforeLoadingData DateTime (UTC) The timestamp just before making the database call(s) AfterLoadingData DateTime (UTC) The timestamp just after the data is finished loading from database","title":"Grid"},{"location":"reference/#gridconfig","text":"The ToShiftGridAsync and ToShiftGrid extension methods accept a GridConfig . This is used to control the Grid. Like setting the page size, index, sorting, filters ...etc. Below are the properties. Property Description DataPageIndex int Sets the page index of the paginated data. DataPageSize int Sets the Page Size (Or number of items/rows per page) that's fetched from the Database. Defaults to 20 Sort List<GridSort> A list of Fields to sort the Data by. The order of the items in the list is important. It'll be passed to the database in the same order. Filters List<GridFilter> A list of filters to filter the Data by. Columns List<GridColumn> Mainly used to hide fields (Set Visible to false). Hidden fields are also excluded it in the SQL Query. And if there are table joins, the joining will be omitted. Pagination PaginationConfig Adjusts the pagination area. ExportConfig ExportConfig Can be used to set the Export flag and the CSV Delimiter.","title":"GridConfig"},{"location":"reference/#gridsort","text":"Property Description Field string The field (Column) for sorting the Data. SortDirection SortDirection An enum indicating the direction of the Sort. SortDirection.Ascending or SortDirection.Descending","title":"GridSort"},{"location":"reference/#gridfilter","text":"We use System.Linq.Dynamic.Core under the hood for applying filters. Property Description Field string The field that the filter is applied on. Operator string The filter operator. Can be one of the below: = , != , > , >= , < , <= , Contains , In , NotIn , StartsWith , EndsWith Value object The value for filtering (or the search term). OR List<GridFilter> A list of GridFilter that will be OR ed with the crreunt filter.","title":"GridFilter"},{"location":"reference/#gridcolumn","text":"Property Description HeaderText string The optional Header Text (or Display Text) for the Column. Useful to pass it down to the client from the Server. Field string The Field Name as specified on the LINQ Select statement. Visible bool When set to false , the field will be excluded in the generated SQL. If the field comes from a table join. The join is also omitted. Hidng columns only work when .Select is used on the data. If .Select is not used, a ColumnHidingException will be thrown. Order int The order of the Column on the Data Grid.","title":"GridColumn"},{"location":"reference/#gridpagination","text":"This is purely there to help the client while setting up the pagination area. You might ignore this and rely on DataPageIndex , DataPageSize , DataCount from the Grid . Sometimes, the number of rows might be too large that the pagination area itself should be paginated. See the below as an example: .md-button{ font-size:12px; padding:10px 5px !important; min-width:45px; } Example In this example, there are 1,000 rows, 20 rows are shown per page, and the current active page index is 12 . First Page (1) < Previous 11 12 13 14 15 Next > Last Page (50) Showing [241 to 260] from [1,000] Below are the properties of the GridPagination according to the example. Property Description Count int Number of Pages. In the above example, there are 1,000 rows and the page size is 20 . So the Count is 50 . PageSize int How many items (Buttons or Links) are shown per page (In the pagination area). In the above example, the PageSize is 5 . Not to be confused with DataPageSize PageStart int The index of the first page in the current view.. In the above example, PageStart is 10 PageEnd int The index of the last page in the current view. In the above example, PageEnd is 14 PageIndex int The active item (PageIndex). In the above example, PageIndex is 12 HasPreviousPage bool True when there are more items BEFORE the current page. In the above example, HasPreviousPage is true HasNextPage bool True when there are more items AFTER the current page. In the above example, HasNextPage is true LastPageIndex int The last PageIndex. In the above example, LastPageIndex is 49 DataStart int The row number (not index) of the first data item. In the above example, DataStart is 241 DataEnd int The row number (not index) of the last data item. In the above example, DataEnd is 260","title":"GridPagination"},{"location":"reference/#paginationconfig","text":"Property Description PageSize int How many items (Buttons or Links) are shown per page (In the pagination area). Not to be confused with DataPageSize","title":"PaginationConfig"},{"location":"reference/#exportconfig","text":"Property Description Export bool The Export Flag. When set to true , the data is prepared for export. We're using the FileHelpers for exporting data to CSV Delimiter string The Delimiter that's used for seperating data in the exported CSV file/stream.","title":"ExportConfig"},{"location":"reference/#columnhidingexception","text":"When configuring the Grid using GridConfig , You can exclude (Hide) certain columns. But this is only possible if Select method is used on the data. Otherwise a ColumnHidingException is thrown Safe Select is used on this example. Hiding works as expected. var shiftGrid = await db . Employees . Select ( x => new { x . ID , x . FirstName , x . LastName , }) . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , new GridConfig { Columns = new List < GridColumn > { new GridColumn { Field = \"FirstName\" , Visible = false } } }); Unsafe Select is not used here and attempting to hide Firstname causes a ColumnHidingException to be thrown. var shiftGrid = await db . Employees . Select ( x => new { x . ID , x . FirstName , x . LastName , }) . ToShiftGridAsync ( \"ID\" , SortDirection . Ascending , new GridConfig { Columns = new List < GridColumn > { new GridColumn { Field = \"FirstName\" , Visible = false } } });","title":"ColumnHidingException"}]}